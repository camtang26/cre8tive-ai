# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Tools

Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification

The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:
```bash
venv/bin/python tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:
```bash
venv/bin/python tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:
```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot

screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM

response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:
```
venv/bin/python ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.
```
venv/bin/python ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```
This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.
```
venv/bin/python ./tools/search_engine.py "your search keywords"
```
This will output the search results in the following format:
```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```
If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## Project Specific Lessons

- Always kill existing preview servers (port 4173) before starting new ones to avoid port conflicts
- When deploying to GitHub Pages, ensure the deployment is from the gh-pages branch
- Use OptimizedImage component for all images to ensure proper asset handling in production
- CSP headers must include all necessary domains for Vimeo and ElevenLabs integration
- Base URL configuration in vite.config.ts should be '/' when using a custom domain
- Always verify local preview build before pushing to production
- When making changes to the GitHub Actions workflow, ensure the correct branch (master) is specified
- Keep the CNAME file in the repository to maintain custom domain configuration
- For GitHub Pages SPA routing:
  - Use a simplified 404.html redirect that only adds a single 'p' parameter
  - Handle the redirect parameter in App.tsx using window.history.replaceState
  - Test all routes thoroughly in preview before deployment
-- You have a python venv in ./venv. Use it.


## Development Best Practices

- Read file contents before making edits to ensure context-aware changes
- **Important:** Do not create new files unless explicitly stated by the user.
- Include debug information in program output for easier troubleshooting
- When using git commands that require multiline messages, use `git commit -F <filename>`
- Always verify CSP configurations locally before deployment
- Test video playback and widget functionality in preview before pushing changes

# Scratchpad

## Completed Tasks

### GitHub Pages Deployment (Jan 2025) ✓
[X] Verify correct branch configuration in GitHub Actions
[X] Update CSP headers for production
[X] Test build locally
[X] Push changes to master
[X] Verify deployment in GitHub Actions
[X] Test live site functionality

### Fix GitHub Pages SPA Routing (10 Feb 2025) ✓
[X] Identify issue with infinite redirects
[X] Update 404.html redirect logic
[X] Implement clean URL handling in App.tsx
[X] Test changes in preview build
[X] Verify all routes work correctly

## Current Task: Setting Up Development Environment

Setup Steps:
[X] Install project dependencies
[ ] Fix TypeScript/React type errors
[X] Install missing packages (framer-motion, etc.)
[X] Start development server
[ ] Verify application runs correctly

Progress:
- Successfully recovered codebase from 1.1.1-updates branch
- Installed all dependencies (including framer-motion and other required packages)
- Development server successfully started on http://localhost:8080
- Vite development server started in 221ms (very good performance!)

Next Steps:
1. Verify the application loads correctly in your browser at http://localhost:8080
2. Check for any console errors or TypeScript warnings
3. Test the main functionality (navigation, components, etc.)

## Current Task

### Cre8tive Website 1.1 Updates (10 Feb 2025)

Setup Phase:
[X] Create new development branch "cre8tive-website-1.1-updates"
[X] Verify branch creation and switch to new branch
[ ] Pull latest changes from master

Planned Changes:
[ ] Copy updates
[ ] Functional changes
[ ] Visual redesigns

Note: All changes will be made on the new branch to preserve the stable master branch.

- **Note:** For future tasks, always ask for permission before creating any new file.

### Website Codebase Exploration (Feb 2025)

[X] Explore project structure
[X] Understand website architecture
[X] Examine key components and pages
[X] Review configuration files
[X] Document findings

Project Overview:
- Modern React website built with TypeScript, Vite, and Tailwind CSS
- Uses Shadcn UI components for consistent design
- Implements React Router for client-side routing
- Features 3D visualizations using Spline for the Agents page
- Deploys to GitHub Pages with custom domain (cre8tive.ai)
- Implements strong security with comprehensive CSP headers
- Uses framer-motion for animations

Key Pages and Components:
- Home page (Index.tsx) - Main landing page with hero, services, gallery, and contact sections
- Agents page - Features 3D robot visualization using Spline
- Studios page - Showcases studio services
- AdManager page - Details the AI Ad Manager product
- ConversationalAI page - Information about conversational AI services
- About and Contact pages - Company information and contact form

Architecture Notes:
- Folder structure follows React best practices with components, pages, hooks, and utils
- GitHub Actions workflow automatically deploys to GitHub Pages on push to master
- Custom SPA routing solution for GitHub Pages using 404.html redirect
- Optimized build configuration with code splitting for better performance

# Robot Design Requirements Note
- When implementing the robot design based on the design at https://21st.dev/serafimcloud/splite/default:
  * Do NOT change the current layout/design of the header and sub-header text in the Agent page hero section.
  * Remove the text "Interactive 3D
Bring your UI to life with beautiful 3D scenes. Create immersive experiences that capture attention and enhance your design." from the code.
