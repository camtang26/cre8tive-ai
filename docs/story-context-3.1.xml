<story-context id="bmad/bmm/workflows/4-implementation/story-context/template" v="1.0">
  <metadata>
    <epicId>3</epicId>
    <storyId>3.1</storyId>
    <title>Neural Briefing Network - Canvas Particle System</title>
    <status>Draft</status>
    <generatedAt>2025-10-09</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>/home/cameronai/projects/cre8tive-website-1006/docs/stories/story-3.1.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>visitor to the AI Briefing Engine page</asA>
    <iWant>to experience a premium, visually stunning 3,000-5,000 particle neural network animation in the hero section</iWant>
    <soThat>I immediately perceive the sophistication and AI intelligence of the platform through an immersive, scroll-interactive visualization</soThat>
    <tasks>
      <task phase="1">Foundation: Component structure, ParticleHero React component, ParticleSystem class skeleton, Canvas setup, Error Boundary (2-3 hours)</task>
      <task phase="2">Particle Physics: Initialization, update loop, rendering with radial gradients, BRIEFING_PALETTE integration, responsive particle counts (2-3 hours)</task>
      <task phase="3">Neural Network Connections: Distance-based connection detection (O(n²) with 100px threshold), opacity-based rendering, cyan glow (1.5-2 hours)</task>
      <task phase="4">GSAP & Mouse Interaction: useGSAP hook, ScrollTrigger integration, MouseInteraction class, entrance animation burst, Lenis compatibility (1.5-2 hours)</task>
      <task phase="5">Performance & Polish: PerformanceMonitor class (FPS tracking, degradation 5K→2K→1K), device capability detection, prefers-reduced-motion, visual tuning (1-2 hours)</task>
      <task phase="6">Integration & QA: BriefingEngine.tsx modification, browser testing matrix (Chrome/Firefox/Safari/Edge), responsive testing (375px/768px/1024px/1920px), accessibility (aria-hidden, keyboard nav), build validation (0.5-1 hour)</task>
    </tasks>
  </story>

  <acceptanceCriteria>
    <category name="Visual Implementation" count="11">
      <criterion id="AC-3.1">Canvas element renders full-viewport (100vw x 100vh) behind hero content with z-index: 0</criterion>
      <criterion id="AC-3.2">3,000-5,000 particles visible on desktop (1920px+), distributed randomly across canvas on initial render</criterion>
      <criterion id="AC-3.3">Particles display gradient colors from Epic 1 palette (indigo #4F46E5, cyan #0891B2, fuchsia #C026D3) with varied distribution</criterion>
      <criterion id="AC-3.4">Particle sizes vary between 2-6px radius with radial gradient glow effect</criterion>
      <criterion id="AC-3.5">Neural network connections (lines) appear between particles within 100px distance</criterion>
      <criterion id="AC-3.6">Connection lines use cyan (#0891B2) stroke color with 30% base opacity, opacity increases as particles get closer</criterion>
      <criterion id="AC-3.7">Particles flow horizontally left-to-right (Brief → Storyboard metaphor) with velocity 0.5-1.0 px/frame</criterion>
      <criterion id="AC-3.8">Background gradient displays dark indigo (#1e1b4b) to darker (#0f172a) vertical gradient</criterion>
      <criterion id="AC-3.9">Hero text content (headline, subheadline, CTAs) renders on top of particles with glassmorphism overlay (z-index: 10)</criterion>
      <criterion id="AC-3.10">Particles and connections visible and clear against dark background (no contrast issues)</criterion>
      <criterion id="AC-3.11">Visual quality matches premium quality expectation (smooth gradients, anti-aliased edges, no pixelation)</criterion>
    </category>
    <category name="Animation & Interaction" count="8">
      <criterion id="AC-3.12">Entrance animation plays on page load: particles burst from center over 1.5-2s duration with staggered appearance</criterion>
      <criterion id="AC-3.13">Particles animate smoothly at 60fps on desktop (Chrome DevTools Performance tab confirms &lt;16.67ms/frame)</criterion>
      <criterion id="AC-3.14">Mouse interaction works on desktop: cursor within 150px attracts nearby particles (visible pull effect)</criterion>
      <criterion id="AC-3.15">Mouse interaction throttled to 60fps maximum (16ms minimum interval between mousemove updates)</criterion>
      <criterion id="AC-3.16">Scroll triggers particle speed increase: particles flow faster as user scrolls down (GSAP ScrollTrigger integration)</criterion>
      <criterion id="AC-3.17">Scroll progress from 0% (top) to 100% (bottom of hero section) modulates particle behavior smoothly</criterion>
      <criterion id="AC-3.18">Entrance animation uses power4.out easing (smooth deceleration, no jarring motion)</criterion>
      <criterion id="AC-3.19">Animations continue without interruption (no stuttering, dropped frames, or freezing)</criterion>
    </category>
    <category name="Performance" count="10">
      <criterion id="AC-3.20">60fps maintained on desktop (Chrome 120+, Safari 17+, Firefox 121+) with 5,000 particles for at least 30 consecutive seconds</criterion>
      <criterion id="AC-3.21">45-60fps maintained on mobile (iOS Safari 15+, Chrome Android) with 1,000 particles</criterion>
      <criterion id="AC-3.22">Initial render completes within 100ms (Performance.now() timestamp: component mount → first particle visible)</criterion>
      <criterion id="AC-3.23">Bundle size increase ≤15KB gzipped (measured via `npm run build`, compare dist/ sizes before/after)</criterion>
      <criterion id="AC-3.24">Lighthouse Performance score ≥75 on Briefing Engine page (acceptable tradeoff for premium visual)</criterion>
      <criterion id="AC-3.25">Performance degradation triggers correctly: FPS &lt;30fps for 5 consecutive frames reduces particle count from 5K → 2K</criterion>
      <criterion id="AC-3.26">Second degradation triggers correctly: FPS &lt;20fps for 5 consecutive frames reduces from 2K → 1K particles</criterion>
      <criterion id="AC-3.27">Performance Monitor logs warnings in dev mode when degradation occurs (console.warn visible in browser console)</criterion>
      <criterion id="AC-3.28">PerformanceMonitor.getCurrentFPS() returns accurate FPS (±2fps variance from Chrome DevTools measured FPS)</criterion>
      <criterion id="AC-3.29">No memory leaks on unmount: navigating away from page and back 10 times does not increase memory usage (Chrome Task Manager validation)</criterion>
    </category>
    <category name="Responsive & Accessibility" count="8">
      <criterion id="AC-3.30">Mobile (viewport width &lt;768px) displays 1,000 particles maximum</criterion>
      <criterion id="AC-3.31">Tablet (768px ≤ width &lt; 1024px) displays 2,000 particles maximum</criterion>
      <criterion id="AC-3.32">Desktop (width ≥1024px) displays 5,000 particles maximum</criterion>
      <criterion id="AC-3.33">Mouse interaction disabled on mobile/touch devices (no mousemove listeners attached)</criterion>
      <criterion id="AC-3.34">prefers-reduced-motion: reduce honored - users with motion sensitivity preference see static gradient background (no particles, no animation)</criterion>
      <criterion id="AC-3.35">Canvas element has aria-hidden="true" attribute (particles are decorative, not content)</criterion>
      <criterion id="AC-3.36">Hero content (text, CTAs) remains fully keyboard navigable (Tab key navigation works, particles don't interfere)</criterion>
      <criterion id="AC-3.37">Screen reader testing (NVDA/VoiceOver) confirms particles don't disrupt content reading</criterion>
    </category>
    <category name="Integration & Compatibility" count="10">
      <criterion id="AC-3.38">ParticleHero component integrates into BriefingEngine.tsx without breaking existing Epic 1/2 functionality</criterion>
      <criterion id="AC-3.39">GSAP useGSAP hook cleanup verified: ParticleHero unmount removes ScrollTrigger instance (no orphaned triggers)</criterion>
      <criterion id="AC-3.40">Lenis smooth scroll continues working normally with particles active (no scroll jank)</criterion>
      <criterion id="AC-3.41">Epic 1 BriefToStoryboardAnimation plays correctly below hero (no animation conflicts)</criterion>
      <criterion id="AC-3.42">Epic 1 color palette constants (BRIEFING_PALETTE) imported and used correctly (no hard-coded colors)</criterion>
      <criterion id="AC-3.43">TypeScript compilation passes without errors (`tsc --noEmit` succeeds)</criterion>
      <criterion id="AC-3.44">ESLint validation passes errors-only (`npm run lint` shows 0 errors, warnings acceptable)</criterion>
      <criterion id="AC-3.45">Production build succeeds (`npm run build` completes without errors)</criterion>
      <criterion id="AC-3.46">Browser compatibility verified: Chrome 120+ (desktop + mobile), Firefox 121+, Safari 17+ (desktop + iOS), Edge 120+</criterion>
      <criterion id="AC-3.47">No console errors in production build (Terser strips console.log/warn, only console.error should remain for critical failures)</criterion>
    </category>
    <category name="Fallback & Error Handling" count="5">
      <criterion id="AC-3.48">Canvas context creation failure handled gracefully: static gradient renders if `getContext('2d')` returns null</criterion>
      <criterion id="AC-3.49">Memory allocation failure handled: typed array allocation failure triggers retry with reduced particle count (500 particles)</criterion>
      <criterion id="AC-3.50">GSAP not available fallback: particles render without scroll transforms if `typeof gsap === 'undefined'`</criterion>
      <criterion id="AC-3.51">React Error Boundary wraps ParticleHero: component errors display fallback UI (StaticGradientFallback component) instead of crashing page</criterion>
      <criterion id="AC-3.52">Performance fallback to static gradient: FPS &lt;15fps for 10 consecutive frames disables particles entirely, shows gradient background</criterion>
    </category>
  </acceptanceCriteria>

  <artifacts>
    <docs>
      <doc path="docs/tech-spec-epic-3.md" title="Technical Specification: Premium Hero Section - Neural Briefing Network" section="Complete">
        Authoritative technical specification covering: Technology selection rationale (GSAP + Canvas Particles, 4.30/5 weighted score), 4 core modules (ParticleHero, ParticleSystem, MouseInteraction, PerformanceMonitor), data models with typed arrays (Float32Array/Uint8Array for performance), 6-phase implementation workflow (9-13 hour estimate), 52 acceptance criteria with traceability mapping, non-functional requirements (60fps target, bundle size ≤15KB, Lighthouse ≥75), graceful degradation strategy (5K→2K→1K→static), risk analysis. KEY SECTIONS: Module 1 (ParticleHero.tsx React component patterns), Module 2 (ParticleSystem.ts physics engine with typed arrays), Module 3 (MouseInteraction.ts throttled events), Module 4 (PerformanceMonitor.ts FPS tracking), Data Models (ParticleConfig, ParticleSystemState interfaces), Performance Budget (16.67ms/frame breakdown).
      </doc>
      <doc path="docs/architecture/animation-patterns.md" title="Animation Patterns & Best Practices" section="GSAP ScrollTrigger Patterns, React Integration & Cleanup">
        GSAP useGSAP hook pattern for React cleanup (prevents memory leaks), ScrollTrigger patterns (basic trigger, scrub, parallax, stagger), Lenis integration (global smooth scroll setup, lenis.on('scroll', ScrollTrigger.update)), performance optimization (GPU acceleration via transform/opacity only, 60fps budget, RAIL model), React cleanup patterns (gsap.context() with ctx.revert()). CRITICAL PATTERN: useGSAP(() => { /* animations */ }, { scope: containerRef }) automatically handles cleanup. AVOID: Nesting ScrollTriggers inside timeline tweens, forgetting cleanup functions, animating width/height (forces layout reflow). USE: transform (x, y, scale, rotation) and opacity only for GPU acceleration.
      </doc>
      <doc path="docs/architecture/frontend-architecture.md" title="Frontend Architecture" section="Component Design Patterns, Animation Architecture, Performance Optimization">
        Component template structure (TypeScript interfaces, JSDoc, semantic HTML, cn() utility, responsive classes), animation library decision tree (GSAP for scroll-linked, Framer Motion for hover/tap, Lenis for global smooth scroll), performance optimization (code splitting, lazy loading, pre-rendering with react-snap), type safety patterns (relaxed mode current, strict mode recommended future). BRIEFING ENGINE COLOR PALETTE LOCATION: src/components/briefing/palette.ts (indigo #4F46E5, cyan #0891B2, fuchsia #C026D3). COMPONENT CATEGORIES: UI primitives (src/components/ui/), feature components (src/components/briefing/), page components (src/pages/).
      </doc>
      <doc path="docs/ARCHITECTURE.md" title="Architecture Overview" section="Tech Stack, Frontend Framework, UI & Styling">
        JAMstack architecture (React 18.3.1 SPA + Vite 5.4.1 + GitHub Pages), animation stack (GSAP 3.13.0 + @gsap/react 2.1.2 for cleanup, Lenis 1.3.11 smooth scroll, Framer Motion 12.4.2 micro-interactions), build system (Vite code splitting, Terser minification, ES2015 target), TypeScript 5.5.3 relaxed mode (noImplicitAny: false, strictNullChecks: false), Tailwind CSS 3.4.11, stats.js 0.17.0 for FPS monitoring. ANIMATION STRATEGY: GSAP for scroll-driven timelines, Lenis for smooth scroll foundation, Framer Motion for simple UI interactions. KNOWN TECHNICAL DEBT: Zero test coverage (manual testing only until Vitest/Playwright added), relaxed TypeScript configuration.
      </doc>
    </docs>
    <code>
      <artifact path="src/components/briefing/palette.ts" kind="constants" symbol="briefingPalette" lines="11-87" reason="Epic 1 color palette constants required for particle colors (AC-3.3, AC-3.6, AC-3.8, AC-3.42). MUST import and use these exact hex values: indigo #4F46E5, cyan #0891B2, fuchsia #C026D3. Provides getColor() helper function. Type-safe BriefingPalette type exported. DO NOT hard-code colors.">
        export const briefingPalette = {
          colors: { indigo: '#4F46E5', cyan: '#0891B2', fuchsia: '#C026D3' },
          indigo: { from: '#6366F1', DEFAULT: '#4F46E5', to: '#4338CA' },
          cyan: { from: '#06B6D4', DEFAULT: '#0891B2', to: '#0E7490', glow: '#22D3EE' },
          fuchsia: { from: '#D946EF', DEFAULT: '#C026D3', to: '#A21CAF' },
          text: { primary: '#E0E7FF', secondary: '#9CA3AF', muted: '#6B7280' }
        }
        Helper functions: getColor(key), getTextColor(key)
      </artifact>
      <artifact path="src/pages/BriefingEngine.tsx" kind="component" symbol="BriefingEngine" lines="19-237" reason="Integration point for ParticleHero component (AC-3.38). Shows existing GSAP useGSAP usage (lines 22-119) for hero entrance animation - ParticleHero must follow same cleanup pattern. Lenis integration (line 231, ReactLenis wrapper). Hero section structure (lines 154-206) where ParticleHero will be inserted. INTEGRATION PATTERN: Add &lt;ParticleHero className='absolute inset-0 z-0' /&gt; before hero-headline div, ensure z-index layering (particles z-0, content z-10).">
        useGSAP(() => { /* hero timeline */ }) pattern at lines 22-119 (proper React cleanup)
        Lenis wrapper: &lt;ReactLenis root options={{ lerp: 0.1, duration: 1.5 }}&gt; (line 231)
        Hero section: className="relative min-h-screen" (line 154) - insert ParticleHero here
        briefingPalette imported (line 13), used for gradient styling
      </artifact>
      <artifact path="node_modules/@gsap/react/index.d.ts" kind="interface" symbol="useGSAP" lines="N/A" reason="Official GSAP React hook for automatic cleanup (AC-3.39). Signature: useGSAP(callback: () =&gt; void, options?: { scope?: RefObject&lt;HTMLElement&gt;, dependencies?: any[] }). Returns void, handles ScrollTrigger cleanup automatically. CRITICAL: Use this hook instead of manual gsap.context() for ParticleHero to ensure ScrollTrigger instances are properly destroyed on unmount.">
        import { useGSAP } from '@gsap/react'
        useGSAP(() => { /* GSAP animations */ }, { scope: containerRef, dependencies: [] })
        Cleanup handled automatically, no return statement needed
      </artifact>
      <artifact path="src/components/briefing/BriefToStoryboardAnimation.tsx" kind="component" symbol="BriefToStoryboardAnimation" lines="N/A" reason="Epic 1 component that renders below hero (AC-3.41). Must verify no animation conflicts after ParticleHero integration. Uses GSAP ScrollTrigger for transformation timeline. Located at line 209 in BriefingEngine.tsx. NO MODIFICATIONS REQUIRED - verify animations play correctly after Epic 3 integration.">
        Epic 1 storyboard transformation animation (unchanged, verify no conflicts)
      </artifact>
    </code>
    <dependencies>
      <node>
        <package name="react" version="^18.3.1" usage="Core React library for ParticleHero component, useRef, useEffect, useState hooks" />
        <package name="react-dom" version="^18.3.1" usage="React DOM rendering" />
        <package name="gsap" version="^3.13.0" usage="GSAP core library (already installed), ScrollTrigger plugin for scroll-linked particle speed modulation, timeline for entrance animation, throttle utility for mousemove (16ms)" />
        <package name="@gsap/react" version="^2.1.2" usage="useGSAP hook for automatic React cleanup (prevents ScrollTrigger memory leaks), replaces manual gsap.context() pattern" />
        <package name="lenis" version="^1.3.11" usage="Smooth scroll library (already configured globally in BriefingEngine.tsx), lenis.on('scroll', ScrollTrigger.update) integration, no ParticleHero code needed (inherited from page)" />
        <package name="typescript" version="^5.5.3" usage="TypeScript compiler (relaxed mode: noImplicitAny: false), type definitions for ParticleConfig, ParticleSystemState, MouseConfig interfaces" />
        <package name="vite" version="^5.4.1" usage="Build tool, code splitting (ParticleHero bundled with main chunk), Terser minification for production" />
        <package name="stats.js" version="^0.17.0" usage="FPS monitoring overlay (existing package, optional for development debugging)" />
        <package name="tailwindcss" version="^3.4.11" usage="CSS framework for ParticleHero className styling (absolute, inset-0, z-0)" />
      </node>
      <browser-native>
        <api name="Canvas 2D Context" usage="Core rendering API for particle system, getContext('2d'), clearRect, beginPath, arc, stroke, fill, createRadialGradient, globalAlpha" browserSupport="Chrome 4+, Firefox 2+, Safari 3+" />
        <api name="RequestAnimationFrame" usage="60fps animation loop for particle physics update and render cycles, cancelAnimationFrame for cleanup" browserSupport="Chrome 24+, Firefox 23+, Safari 6+" />
        <api name="Performance API" usage="High-resolution timing for FPS calculation (performance.now()), frame time measurement, Performance.now() timestamps for initial render AC-3.22" browserSupport="Chrome 24+, Firefox 15+, Safari 8+" />
        <api name="Float32Array" usage="Typed array for particle positions, velocities, sizes (cache-friendly memory layout, performance optimization)" browserSupport="Chrome 7+, Firefox 4+, Safari 5.1+" />
        <api name="Uint8Array" usage="Typed array for particle colors (RGBA values, 8-bit integers, 4x smaller than floats)" browserSupport="Chrome 7+, Firefox 4+, Safari 5.1+" />
        <api name="matchMedia" usage="prefers-reduced-motion detection for AC-3.34, window.matchMedia('(prefers-reduced-motion: reduce)').matches" browserSupport="Chrome 9+, Firefox 6+, Safari 5.1+" />
      </browser-native>
    </dependencies>
  </artifacts>

  <constraints>
    <constraint type="architecture" source="docs/tech-spec-epic-3.md#System Architecture">Zero new npm dependencies. Use native Canvas 2D API, existing GSAP 3.13.0, @gsap/react 2.1.2, Lenis 1.3.11. Bundle size impact must be ≤15KB gzipped (ParticleHero + system modules only).</constraint>
    <constraint type="performance" source="docs/tech-spec-epic-3.md#Non-Functional Requirements - Performance">60fps target (16.67ms/frame budget): Particle physics ≤5ms, Connection detection ≤3ms, Canvas rendering ≤4ms, Mouse interaction ≤1ms, GSAP ScrollTrigger ≤1ms, Browser layout/paint ≤2.67ms. Total animation budget coordination: Epic 3 (5-8ms) + Epic 1 timelines (8-12ms) = ~16ms maintains 60fps.</constraint>
    <constraint type="performance" source="docs/tech-spec-epic-3.md#Graceful Degradation">Degradation strategy: Level 0 (5K particles, 60fps) → Level 1 (&lt;30fps for 5 frames: 2K particles) → Level 2 (&lt;20fps for 5 frames: 1K particles) → Fallback (&lt;15fps for 10 frames: static gradient). Mobile defaults: 1K particles (viewport &lt;768px), 2K particles (768px-1024px), 5K particles (≥1024px).</constraint>
    <constraint type="integration" source="docs/architecture/animation-patterns.md#React Integration & Cleanup">MANDATORY: Use useGSAP hook from @gsap/react for all GSAP animations. Pattern: useGSAP(() => { /* animations */ }, { scope: containerRef }). Automatic cleanup on unmount (prevents ScrollTrigger memory leaks). DO NOT use manual gsap.context() or forget cleanup functions.</constraint>
    <constraint type="integration" source="docs/tech-spec-epic-3.md#Integration Points">Epic 1 color palette: MUST import BRIEFING_PALETTE from src/components/briefing/palette.ts (AC-3.42). DO NOT hard-code colors (#4F46E5, #0891B2, #C026D3). Lenis integration inherited from BriefingEngine.tsx ReactLenis wrapper (no ParticleHero code needed). Verify Epic 1 BriefToStoryboardAnimation plays correctly below hero (AC-3.41).</constraint>
    <constraint type="code-quality" source="docs/ARCHITECTURE.md#TypeScript Configuration">TypeScript relaxed mode (noImplicitAny: false, strictNullChecks: false). Allow implicit any where practical, but prefer explicit types for public interfaces (ParticleConfig, ParticleSystemState, ParticleHeroProps). ESLint must pass errors-only (npm run lint shows 0 errors, warnings acceptable).</constraint>
    <constraint type="accessibility" source="docs/architecture/frontend-architecture.md#Accessibility Standards">Canvas element MUST have aria-hidden="true" (AC-3.35, particles are decorative). prefers-reduced-motion MUST be honored (AC-3.34): window.matchMedia('(prefers-reduced-motion: reduce)').matches → static gradient fallback, no particles/animation. Hero content must remain keyboard navigable (Tab key, AC-3.36).</constraint>
    <constraint type="browser-compatibility" source="docs/tech-spec-epic-3.md#Browser Compatibility">Target modern browsers: Chrome 120+, Firefox 121+, Safari 17+, Edge 120+ (desktop + mobile). Canvas 2D, RequestAnimationFrame, typed arrays, Performance API all supported. Graceful degradation: Canvas context creation failure → static gradient fallback (AC-3.48).</constraint>
    <constraint type="file-structure" source="docs/tech-spec-epic-3.md#Component Structure">Component organization: src/components/briefing/ParticleHero.tsx (main), src/components/briefing/particle-system/*.ts (ParticleSystem, MouseInteraction, PerformanceMonitor, types). Integration: Modify src/pages/BriefingEngine.tsx (add &lt;ParticleHero /&gt; before hero content, z-index layering). DO NOT create test files (zero test infrastructure per ARCHITECTURE.md technical debt).</constraint>
  </constraints>

  <interfaces>
    <interface name="BRIEFING_PALETTE" kind="constant" signature="briefingPalette.colors.indigo | cyan | fuchsia: string" path="src/components/briefing/palette.ts">
      Epic 1 color constants. REQUIRED IMPORT: import { briefingPalette } from '@/components/briefing/palette'. Usage: briefingPalette.colors.indigo (#4F46E5), briefingPalette.colors.cyan (#0891B2), briefingPalette.colors.fuchsia (#C026D3). AC-3.3, AC-3.6 mandate using these exact values (no hard-coding).
    </interface>
    <interface name="useGSAP" kind="hook" signature="useGSAP(callback: () => void | (() => void), options?: { scope?: RefObject&lt;HTMLElement&gt;, dependencies?: any[] }): void" path="@gsap/react">
      Official GSAP React hook. Replaces manual gsap.context(). Automatic ScrollTrigger cleanup on unmount. MANDATORY for AC-3.39 (cleanup verification). Example: useGSAP(() => { ScrollTrigger.create({...}) }, { scope: containerRef }). Return cleanup function optional (handled automatically).
    </interface>
    <interface name="Canvas 2D Context" kind="browser-api" signature="HTMLCanvasElement.getContext('2d'): CanvasRenderingContext2D | null" path="native">
      Core rendering API. Methods: clearRect(x, y, w, h), beginPath(), arc(x, y, radius, 0, Math.PI * 2), stroke(), fill(), createRadialGradient(x0, y0, r0, x1, y1, r1), globalAlpha property. Null check required for AC-3.48 (fallback handling).
    </interface>
    <interface name="ScrollTrigger.create" kind="gsap-plugin" signature="ScrollTrigger.create(config: ScrollTriggerConfig): ScrollTrigger" path="gsap/ScrollTrigger">
      GSAP ScrollTrigger plugin. Config: { trigger: HTMLElement, start: string, end: string, scrub: number | boolean, onUpdate: (self) => void }. Used for AC-3.16, AC-3.17 (scroll-linked particle speed modulation). Cleanup handled by useGSAP hook.
    </interface>
    <interface name="Performance.now" kind="browser-api" signature="performance.now(): DOMHighResTimeStamp" path="native">
      High-resolution timing for FPS calculation (AC-3.28) and initial render timing (AC-3.22). Returns milliseconds since page load with microsecond precision. Usage: const deltaTime = performance.now() - lastFrameTime.
    </interface>
  </interfaces>

  <tests>
    <standards>
      Project has ZERO automated test infrastructure (Vitest, Jest, React Testing Library, Playwright not configured). ALL testing is MANUAL per ARCHITECTURE.md technical debt (lines 680-713). Required validations: Browser testing matrix (Chrome/Firefox/Safari/Edge desktop + mobile), responsive testing (375px/768px/1024px/1920px viewports), Chrome DevTools Performance tab (60fps verification, frame time measurement), Lighthouse audit (Performance score ≥75), build validation (npm run build, tsc --noEmit, npm run lint), accessibility testing (keyboard navigation, screen readers NVDA/VoiceOver, prefers-reduced-motion emulation), memory leak testing (Chrome Task Manager, navigate away/back 10x), bundle size comparison (dist/ before/after, verify ≤15KB increase). Performance monitoring tools: stats.js (FPS overlay in dev), Chrome DevTools Performance tab, Lighthouse.
    </standards>
    <locations>
      No test directories (src/__tests__, tests/ do not exist). Manual testing only. Performance profiling via Chrome DevTools Performance tab. Visual QA via browser inspection. Bundle size via npm run build → compare dist/assets/*.js sizes.
    </locations>
    <ideas>
      <test_idea ac="AC-3.13, AC-3.20, AC-3.21" description="Chrome DevTools Performance tab: Record 30s desktop animation (5K particles), verify frame times &lt;16.67ms average, FPS ≥60. Repeat on mobile (1K particles), verify FPS 45-60. Check PerformanceMonitor.getCurrentFPS() accuracy (±2fps vs DevTools measured FPS per AC-3.28)." />
      <test_idea ac="AC-3.22" description="Performance.now() timestamps: Measure component mount to first particle visible (ParticleHero useEffect → first render cycle). Verify &lt;100ms initialization time. Log timestamps in dev mode: console.log('[ParticleHero] Mount:', performance.now()); ... console.log('[ParticleHero] First Render:', performance.now());" />
      <test_idea ac="AC-3.23" description="Bundle size comparison: Run 'npm run build' before and after Epic 3 integration. Compare dist/assets/index-[hash].js gzipped sizes (gzip -c dist/assets/index-*.js | wc -c). Verify increase ≤15KB (15360 bytes). ParticleHero ~3KB + ParticleSystem ~5KB + MouseInteraction ~2KB + PerformanceMonitor ~2KB + types ~1KB = ~13KB target." />
      <test_idea ac="AC-3.25, AC-3.26, AC-3.27" description="Performance degradation testing: Chrome DevTools CPU throttling (6x slowdown). Verify FPS drops &lt;30fps → particle count reduces 5K→2K (AC-3.25). Continue throttling, verify &lt;20fps → 2K→1K (AC-3.26). Check dev console for warnings: '[ParticleHero] FPS below 30, reducing particles to 2000' (AC-3.27, import.meta.env.DEV check)." />
      <test_idea ac="AC-3.29" description="Memory leak test: Navigate to BriefingEngine.tsx, wait 5s, navigate away to /studios, back to /briefing-engine. Repeat 10x. Monitor Chrome Task Manager (Shift+Esc) → JavaScript memory for tab. Verify memory does not increase &gt;10MB over baseline after 10 cycles. Test useGSAP cleanup: ScrollTrigger.getAll() should return same count before/after navigation." />
      <test_idea ac="AC-3.34" description="prefers-reduced-motion testing: Chrome DevTools → Rendering tab → Emulate CSS media 'prefers-reduced-motion: reduce'. Reload BriefingEngine page. Verify ParticleHero displays static gradient background (dark indigo #1e1b4b → #0f172a), NO particles, NO animation. Hero content still visible and functional." />
      <test_idea ac="AC-3.38, AC-3.40, AC-3.41" description="Epic 1/2 integration regression: After ParticleHero integration, verify: (1) Epic 1 BriefToStoryboardAnimation plays correctly below hero (scroll down, check transformation timeline), (2) Lenis smooth scroll works (no jank, momentum feels correct), (3) Visual Styles Gallery GSAP stagger reveals correctly, (4) No console errors, (5) No z-index layering conflicts (hero text readable on top of particles)." />
      <test_idea ac="AC-3.42" description="Color palette validation: Code review ParticleHero.tsx, ParticleSystem.ts. Verify NO hard-coded colors (#4F46E5, #0891B2, #C026D3). Verify import statement: 'import { briefingPalette } from '@/components/briefing/palette''. Verify usage: briefingPalette.colors.indigo, briefingPalette.colors.cyan, briefingPalette.colors.fuchsia. Visual QA: Particles display correct indigo/cyan/fuchsia gradient distribution." />
      <test_idea ac="AC-3.43, AC-3.44, AC-3.45" description="Build validation suite: (1) TypeScript: 'tsc --noEmit' → verify 0 errors, (2) ESLint: 'npm run lint' → verify 0 errors (warnings OK), (3) Production build: 'npm run build' → verify completes without errors, (4) Production console: Load built site from dist/, open DevTools console, verify no errors (only console.error allowed, console.log/warn stripped by Terser per AC-3.47)." />
      <test_idea ac="AC-3.46" description="Browser compatibility matrix: Test ParticleHero on (1) Chrome 120+ desktop (Windows/Mac), (2) Firefox 121+ desktop, (3) Safari 17+ desktop (Mac), (4) Edge 120+ desktop (Windows), (5) Chrome Android mobile (Pixel 6+), (6) Safari iOS mobile (iPhone 12+). Verify: Canvas renders, particles animate, 60fps on desktop / 45-60fps on mobile, mouse interaction desktop-only, touch interaction disabled mobile, responsive particle counts (1K/2K/5K), no console errors." />
      <test_idea ac="AC-3.48, AC-3.49, AC-3.50" description="Fallback testing: (1) Canvas failure: Mock getContext('2d') return null → verify static gradient renders, no crashes, (2) Memory allocation failure: Mock Float32Array constructor throw error → verify retry with 500 particles, (3) GSAP unavailable: Mock typeof gsap === 'undefined' → verify particles render without scroll transforms, no crashes. Test in isolation via browser console overrides or unit test mocks (if test infrastructure added)." />
    </ideas>
  </tests>
</story-context>
