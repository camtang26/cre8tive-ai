# Pattern: Typewriter Effect
# Category: Text Animations
# GSAP Excellence Engine Pattern Library

id: pattern-typewriter-effect-007
name: "Typewriter Text Effect"
category: "text-animations"
complexity: "simple"
gsap_version: "3.12.0"
plugins_required: []
description: "Classic typewriter effect revealing text character by character"
inspiration_source: "Terminal animations, dev tool sites"
performance_notes: "Very lightweight, excellent performance"
created_date: "2025-10-11"
last_validated: "2025-10-11"
success_count: 0
tags: ["text", "typewriter", "simple", "classic"]
framework: "vanilla"

code_example: |
  import { gsap } from 'gsap';

  // Typewriter effect
  function typewriterEffect(element, text, duration = 2) {
    const chars = text.split('');
    element.textContent = '';

    gsap.to({}, {
      duration: duration,
      ease: "none",
      onUpdate: function() {
        const progress = this.progress();
        const charsToShow = Math.floor(progress * chars.length);
        element.textContent = chars.slice(0, charsToShow).join('');
      },
      onComplete: () => {
        element.textContent = text; // Ensure complete text
      }
    });
  }

  // Usage
  const element = document.querySelector('[data-typewriter]');
  const text = element.textContent;
  typewriterEffect(element, text, 2); // 2 second duration

usage_notes: |
  HTML:
  <div data-typewriter>Text to type out...</div>

  JavaScript reads the text content and animates character by character
  Duration = total time to type all characters

variations:
  with_cursor: |
    // Add blinking cursor
    element.style.borderRight = '2px solid currentColor';
    element.style.paddingRight = '5px';

    setInterval(() => {
      element.style.borderColor =
        element.style.borderColor === 'transparent'
        ? 'currentColor'
        : 'transparent';
    }, 500);

  variable_speed: |
    // Random speed variations for realistic typing
    const charDelay = 0.05 + Math.random() * 0.05; // 0.05-0.1s per char

  pause_on_punctuation: |
    // Pause longer on punctuation
    onUpdate: function() {
      const progress = this.progress();
      const charsToShow = Math.floor(progress * chars.length);
      const currentChar = chars[charsToShow - 1];

      // Add pause on punctuation
      if ('.!?'.includes(currentChar)) {
        this.pause();
        setTimeout(() => this.play(), 300);
      }

      element.textContent = chars.slice(0, charsToShow).join('');
    }

performance_tips:
  - Very lightweight animation
  - No DOM manipulation per character
  - Use textContent not innerHTML
  - Consider throttling for very long text

accessibility:
  reduced_motion: "Show complete text immediately"
  implementation: |
    if (window.matchMedia('(prefers-reduced-motion: reduce)').matches) {
      element.textContent = text;
      return;
    }

  screen_readers: |
    // Screen readers will read complete text
    // Consider adding aria-live="polite" for dynamic updates
    element.setAttribute('aria-live', 'polite');

browser_support:
  chrome: "Full support"
  firefox: "Full support"
  safari: "Full support"
  mobile: "Excellent support"

cleanup: |
  // Store animation reference to kill on cleanup
  const animation = gsap.to({}, { ... });
  // Later: animation.kill();
