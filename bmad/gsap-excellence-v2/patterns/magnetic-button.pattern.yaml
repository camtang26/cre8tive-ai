# Pattern: Magnetic Button
# Category: Interactive Animations
# GSAP Excellence Engine Pattern Library

id: pattern-magnetic-button-010
name: "Magnetic Button Effect"
category: "interactive"
complexity: "medium"
gsap_version: "3.12.0"
plugins_required: []
description: "Button follows mouse cursor with magnetic attraction - premium interaction"
inspiration_source: "Awwwards experimental UI, agency CTAs"
performance_notes: "60fps with throttled mouse tracking and transform animations"
created_date: "2025-10-11"
last_validated: "2025-10-11"
success_count: 0
tags: ["magnetic", "button", "interactive", "cursor", "premium", "experimental"]
framework: "vanilla"

code_example: |
  import { gsap } from 'gsap';

  // Magnetic button effect
  const magneticButtons = document.querySelectorAll('[data-magnetic]');

  magneticButtons.forEach(button => {
    const strength = button.dataset.magneticStrength || 0.3; // Default 0.3

    button.addEventListener('mousemove', (e) => {
      const rect = button.getBoundingClientRect();
      const centerX = rect.left + rect.width / 2;
      const centerY = rect.top + rect.height / 2;

      const deltaX = (e.clientX - centerX) * strength;
      const deltaY = (e.clientY - centerY) * strength;

      gsap.to(button, {
        x: deltaX,
        y: deltaY,
        duration: 0.3,
        ease: "power2.out"
      });
    });

    button.addEventListener('mouseleave', () => {
      gsap.to(button, {
        x: 0,
        y: 0,
        duration: 0.5,
        ease: "elastic.out(1, 0.5)" // Bouncy return
      });
    });
  });

usage_notes: |
  HTML:
  <button data-magnetic data-magnetic-strength="0.4">
    Magnetic Button
  </button>

  data-magnetic: Enables magnetic effect
  data-magnetic-strength: Controls attraction strength (0-1)
    - 0.2 = subtle
    - 0.5 = medium
    - 0.8 = strong

variations:
  with_inner_element: |
    // Move inner element more than button
    const inner = button.querySelector('[data-magnetic-inner]');

    button.addEventListener('mousemove', (e) => {
      // Button moves subtle
      gsap.to(button, { x: deltaX * 0.3, y: deltaY * 0.3 });

      // Inner element moves more
      gsap.to(inner, { x: deltaX * 0.6, y: deltaY * 0.6 });
    });

  scale_on_hover: |
    // Scale up when mouse enters
    button.addEventListener('mouseenter', () => {
      gsap.to(button, { scale: 1.1, duration: 0.3 });
    });

  rotation_effect: |
    // Add subtle rotation based on mouse position
    const angle = Math.atan2(deltaY, deltaX) * (180 / Math.PI);
    gsap.to(button, {
      x: deltaX,
      y: deltaY,
      rotation: angle * 0.1, // Subtle rotation
      duration: 0.3
    });

advanced_example: |
  // Magnetic area larger than button
  const magneticArea = button.parentElement;
  const maxDistance = 100; // Max attraction distance in px

  magneticArea.addEventListener('mousemove', (e) => {
    const rect = button.getBoundingClientRect();
    const centerX = rect.left + rect.width / 2;
    const centerY = rect.top + rect.height / 2;

    const distance = Math.sqrt(
      Math.pow(e.clientX - centerX, 2) +
      Math.pow(e.clientY - centerY, 2)
    );

    // Only attract if within maxDistance
    if (distance < maxDistance) {
      const strength = 1 - (distance / maxDistance); // Fade with distance

      const deltaX = (e.clientX - centerX) * 0.3 * strength;
      const deltaY = (e.clientY - centerY) * 0.3 * strength;

      gsap.to(button, { x: deltaX, y: deltaY, duration: 0.3 });
    }
  });

performance_tips:
  - Throttle mousemove events (every 16ms)
  - Use transform not left/top
  - Limit to important CTAs only
  - Set will-change: transform on hover
  - Consider disabling on mobile

accessibility:
  reduced_motion: "Disable magnetic effect"
  implementation: |
    if (window.matchMedia('(prefers-reduced-motion: reduce)').matches) {
      return;
    }

  keyboard: |
    // Magnetic effect is mouse-only
    // Ensure button works normally with keyboard
    // Focus state should be visible

browser_support:
  chrome: "Full support"
  firefox: "Full support"
  safari: "Full support"
  mobile: "Not recommended (no hover state)"

cleanup: |
  button.removeEventListener('mousemove', handleMouseMove);
  button.removeEventListener('mouseleave', handleMouseLeave);
