# Pattern: Timeline Sequence
# Category: Timeline Choreography
# GSAP Excellence Engine Pattern Library

id: pattern-timeline-sequence-005
name: "Timeline Sequence Choreography"
category: "timelines"
complexity: "medium"
gsap_version: "3.12.0"
plugins_required: []
description: "Complex multi-step animation sequence with precise timing control"
inspiration_source: "Product launch animations, hero sequences"
performance_notes: "60fps with properly choreographed timeline and GPU properties"
created_date: "2025-10-11"
last_validated: "2025-10-11"
success_count: 0
tags: ["timeline", "sequence", "choreography", "complex", "premium"]
framework: "vanilla"

code_example: |
  import { gsap } from 'gsap';

  // Create complex animation sequence
  const tl = gsap.timeline({
    defaults: {
      ease: "power2.out",
      duration: 0.6
    },
    // Optional: control timeline behavior
    paused: false,
    repeat: 0,
    yoyo: false,
    onComplete: () => console.log('Sequence complete')
  });

  // Build sequence step by step
  tl.from('[data-hero-title]', {
      y: 50,
      opacity: 0
    })
    .from('[data-hero-subtitle]', {
      y: 30,
      opacity: 0
    }, '-=0.3') // Overlap by 0.3s
    .from('[data-hero-cta]', {
      scale: 0.8,
      opacity: 0
    }, '-=0.2') // Overlap by 0.2s
    .from('[data-hero-image]', {
      x: 100,
      opacity: 0,
      duration: 0.8
    }, '-=0.4') // Start 0.4s before previous ends
    .from('[data-features] > *', {
      y: 20,
      opacity: 0,
      stagger: 0.1 // Stagger within timeline
    }, '-=0.3');

  // Control timeline programmatically
  // tl.play();
  // tl.pause();
  // tl.reverse();
  // tl.progress(0.5); // Jump to 50%

usage_notes: |
  Timeline Position Parameter (third argument):
  - No parameter: After previous animation
  - "+=1": 1 second after previous ends
  - "-=0.5": 0.5 seconds before previous ends (overlap)
  - "<": Same time as previous starts
  - "<0.5": 0.5s after previous starts
  - "label": At a specific label
  - "50%": At 50% of total timeline

  Example:
  tl.to(el1, { x: 100 })
    .to(el2, { x: 100 }, "+=1")    // 1s gap
    .to(el3, { x: 100 }, "-=0.5")  // Overlap 0.5s
    .to(el4, { x: 100 }, "<")      // Same time as el3

advanced_timeline: |
  // Advanced timeline with labels
  const tl = gsap.timeline();

  tl.addLabel("start")
    .from(title, { opacity: 0 })
    .addLabel("titleComplete")
    .from(subtitle, { opacity: 0 }, "titleComplete-=0.3")
    .addLabel("contentReady")
    .from(content, { opacity: 0 }, "contentReady");

  // Jump to labels
  tl.play("titleComplete");

performance_tips:
  - Use timeline defaults for common properties
  - Avoid long timelines (>10 steps) - split into multiple
  - Cache selectors before timeline creation
  - Use labels for complex sequences
  - Kill timeline on cleanup: tl.kill()

accessibility:
  reduced_motion: "Play timeline instantly at end state"
  implementation: |
    if (window.matchMedia('(prefers-reduced-motion: reduce)').matches) {
      tl.progress(1).pause(); // Jump to end, pause
      return;
    }

browser_support:
  chrome: "Full support"
  firefox: "Full support"
  safari: "Full support"
  mobile: "Full support"

cleanup: |
  // Kill timeline on component unmount
  tl.kill();
  // Or use GSAP context for automatic cleanup
  const ctx = gsap.context(() => {
    // Timeline here
  }, containerElement);
  // ctx.revert() on cleanup
